import asyncio
import json
import time
from flask import Flask, request, jsonify
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile
import aiohttp

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram –±–æ—Ç–∞
BOT_TOKEN = "8089270679:AAEfI71LafcY0ube9MpZTgkcKfPVCFa0MCA"
CHAT_ID = "-1002527161177"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è aiogram
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–ø–∏—Å–æ–∫ –ø–∏—Ç–æ–º—Ü–µ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
PET_LIST = [
    "Corrupted Kitsune", "Raiju", "Kitsune", "Fennec Fox", 
    "Disco Bee", "Raccoon", "Queen Bee", "Dragonfly", 
    "Butterfly", "Mimic Octopus", "T-Rex", "Spinosaurus"
]

# –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
stats = {
    "total_requests": 0,
    "successful_notifications": 0,
    "failed_notifications": 0,
    "start_time": time.time()
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /kickall
@dp.message(types.Command("kickall"))
async def kickall_command(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /kickall"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
        await bot.send_message(
            chat_id=CHAT_ID,
            text="üö´ *–ö–æ–º–∞–Ω–¥–∞ /kickall –ø–æ–ª—É—á–µ–Ω–∞!*\n\n" +
                 "‚úÖ *–°—Ç–∞—Ç—É—Å:* –ö–æ–º–∞–Ω–¥–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è\n" +
                 "üë• *–î–µ–π—Å—Ç–≤–∏–µ:* –ö–∏–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å–æ —Å–∫—Ä–∏–ø—Ç–æ–º\n\n" +
                 "‚è∞ *–í—Ä–µ–º—è:* " + datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            parse_mode="Markdown"
        )
        
        print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /kickall –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç {message.from_user.username}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /kickall: {e}")

async def send_telegram_message(message, parse_mode="Markdown"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –∏—Å–ø–æ–ª—å–∑—É—è aiogram"""
    try:
        await bot.send_message(
            chat_id=CHAT_ID,
            text=message,
            parse_mode=parse_mode
        )
        stats["successful_notifications"] += 1
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
        stats["failed_notifications"] += 1
        return False

async def send_telegram_photo(photo_url, caption, parse_mode="Markdown"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é –≤ Telegram –∏—Å–ø–æ–ª—å–∑—É—è aiogram"""
    try:
        await bot.send_photo(
            chat_id=CHAT_ID,
            photo=photo_url,
            caption=caption,
            parse_mode=parse_mode
        )
        stats["successful_notifications"] += 1
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –≤ Telegram: {e}")
        stats["failed_notifications"] += 1
        return False

@app.route('/bot<token>/sendMessage', methods=['POST'])
def send_message(token):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"""
    stats["total_requests"] += 1
    
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({"error": "No data provided"}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –±–æ—Ç
        if token != BOT_TOKEN:
            return jsonify({"error": "Invalid token"}), 401
        
        message = data.get("text", "")
        parse_mode = data.get("parse_mode", "Markdown")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        success = loop.run_until_complete(send_telegram_message(message, parse_mode))
        loop.close()
        
        if success:
            return jsonify({"ok": True, "result": {"message_id": 1}}), 200
        else:
            return jsonify({"ok": False, "error_code": 500}), 500
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/bot<token>/sendPhoto', methods=['POST'])
def send_photo(token):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ"""
    stats["total_requests"] += 1
    
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({"error": "No data provided"}), 400
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –±–æ—Ç
        if token != BOT_TOKEN:
            return jsonify({"error": "Invalid token"}), 401
        
        photo_url = data.get("photo", "")
        caption = data.get("caption", "")
        parse_mode = data.get("parse_mode", "Markdown")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        success = loop.run_until_complete(send_telegram_photo(photo_url, caption, parse_mode))
        loop.close()
        
        if success:
            return jsonify({"ok": True, "result": {"message_id": 1}}), 200
        else:
            return jsonify({"ok": False, "error_code": 500}), 500
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ç–æ: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/bot<token>/getUpdates', methods=['GET'])
def get_updates(token):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    stats["total_requests"] += 1
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞—à –±–æ—Ç
        if token != BOT_TOKEN:
            return jsonify({"error": "Invalid token"}), 401
        
        offset = request.args.get('offset', 0)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram –∏—Å–ø–æ–ª—å–∑—É—è aiogram
        async def get_updates_async():
            try:
                updates = await bot.get_updates(offset=int(offset))
                return {"ok": True, "result": [update.model_dump() for update in updates]}
            except Exception as e:
                return {"ok": False, "error_code": 500, "description": str(e)}
        
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        result = loop.run_until_complete(get_updates_async())
        loop.close()
        
        return jsonify(result), 200 if result["ok"] else 500
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/stats', methods=['GET'])
def get_stats():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞"""
    uptime = time.time() - stats["start_time"]
    hours = int(uptime // 3600)
    minutes = int((uptime % 3600) // 60)
    seconds = int(uptime % 60)
    
    return jsonify({
        "uptime": f"{hours}h {minutes}m {seconds}s",
        "total_requests": stats["total_requests"],
        "successful_notifications": stats["successful_notifications"],
        "failed_notifications": stats["failed_notifications"],
        "success_rate": f"{(stats['successful_notifications'] / max(stats['total_requests'], 1) * 100):.1f}%"
    })

@app.route('/health', methods=['GET'])
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞"""
    return jsonify({"status": "healthy", "timestamp": datetime.now().isoformat()})

@app.route('/', methods=['GET'])
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return jsonify({
        "message": "Telegram Proxy Server",
        "version": "1.0",
        "endpoints": {
            "send_message": "/bot<token>/sendMessage",
            "send_photo": "/bot<token>/sendPhoto", 
            "get_updates": "/bot<token>/getUpdates",
            "stats": "/stats",
            "health": "/health"
        }
    })

if __name__ == '__main__':
    print("üöÄ Telegram Proxy Server —Å aiogram –∑–∞–ø—É—â–µ–Ω!")
    print(f"üì° –°–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É 9999")
    print(f"ü§ñ –ë–æ—Ç —Ç–æ–∫–µ–Ω: {BOT_TOKEN[:20]}...")
    print(f"üí¨ –ß–∞—Ç ID: {CHAT_ID}")
    print(f"üêæ –°–ø–∏—Å–æ–∫ –ø–∏—Ç–æ–º—Ü–µ–≤: {len(PET_LIST)} –ø–∏—Ç–æ–º—Ü–µ–≤")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä
    app.run(host='0.0.0.0', port=9999, debug=False) 
